
#Область Интерфейс_работы_с_КА

// Возвращает константные значения
// Возвращаемое значение:
//   <Структура>   - константы для автомата
//

Функция Определения() экспорт
	
	
	Структура = Новый Структура;
	Структура.Вставить("ДКА",1);
	Структура.Вставить("НКА",2);
	Структура.Вставить("еНКА",3);
	
	Возврат Структура;
КонецФункции // Определения()



// инициализирует необходимые структуры для КА
//
// Параметры
//  <ТипКА>  - Число - тип конечного автомата (1 - ДКА, 2 - НКА, 3 - еНКА)
//  <ДополнительныеСвойства>  - <Структура> - Дополнительные свойства (достпные ключи - Отладка, Путь к dot )
//
// Возвращаемое значение:
//   <Структура>   - описание автомат
//
Функция ИнициализироватьКА(ТипКА,ДополнительныеСвойства = Неопределено) экспорт
	
	СтруктураВозврата = новый Структура;
	
	СтруктураВозврата.Вставить("ЭтоДКА",ТипКА = Определения().ДКА);
	СтруктураВозврата.Вставить("ЭтоНКА",ТипКА =  Определения().НКА);
	СтруктураВозврата.Вставить("ЭтоеНКА",ТипКА =  Определения().еНКА);
	
	СтруктураВозврата.Вставить("НачальноеСостояние",Неопределено);
	СтруктураВозврата.Вставить("ТекущееСостояние",Неопределено);
	СтруктураВозврата.Вставить("КонечныеСостояния",новый Соответствие);
	СтруктураВозврата.Вставить("Алфавит",новый Соответствие);
	
	СтруктураВозврата.Вставить("Состояния",новый Соответствие);
	СтруктураВозврата.Вставить("СоответствиеПереходов",новый Соответствие);
	
	Если СтруктураВозврата.ЭтоеНКА Тогда
		СтруктураВозврата.Вставить("Эпсилон",новый УникальныйИдентификатор);
		СтруктураВозврата.Алфавит[СтруктураВозврата.Эпсилон] = СтруктураВозврата.Эпсилон;
	Иначе
		СтруктураВозврата.Вставить("Эпсилон",Неопределено);
	КонецЕсли; 
	
	СтруктураВозврата.Вставить("ОшибочноеСостояние",Неопределено);
	
	
	СтруктураВозврата.Вставить("ДополнительныеСвойства",новый Структура);
	Если ТипЗнч(ДополнительныеСвойства) = тип("Структура") Тогда
		Для каждого х из ДополнительныеСвойства Цикл
			СтруктураВозврата.ДополнительныеСвойства.Вставить(х.Ключ,х.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
	
КонецФункции // ИнициализироватьКА()

// Установливает все возможные символы алфавита
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <Алфавит>  - <Массив> - список доступных символов, не может содержать Неопределено
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
Функция УстановитьАлфавит(ДанныеКА,Алфавит) экспорт
	Для каждого х из Алфавит Цикл
		Если х = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ДанныеКА.Алфавит[х] = х;
	КонецЦикла;  
	
	Если ДанныеКА.ЭтоеНКА Тогда
		Алфавит.Добавить(ДанныеКА.Эпсилон);
	КонецЕсли; 
	
	Возврат ЭтотОбъект;
КонецФункции // УстановитьАлфавит()


// Установливает множество всех состояний
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <Состояния>  - <Массив> - множество всех состояний
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
Функция ДобавитьСостояния(ДанныеКА,Состояния) экспорт
	
	
	Для каждого х из Состояния Цикл
		ДанныеКА.Состояния[х] = х;
		ДанныеКА.СоответствиеПереходов[х] = новый Соответствие;
	КонецЦикла; 
	
	
	Если не ДанныеКА.ОшибочноеСостояние = Неопределено Тогда
		ДанныеКА.Состояния[ДанныеКА.ОшибочноеСостояние] = ДанныеКА.ОшибочноеСостояние;
		ДанныеКА.СоответствиеПереходов[ДанныеКА.ОшибочноеСостояние] = новый Соответствие;
	КонецЕсли; 
	
	Возврат ЭтотОбъект;
	
КонецФункции // ДобавитьСостояния()


// Установливает множество конечных состояний
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <Состояния>  - <Массив> - множество конечных состояний
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
Функция УстановитьКонечноеСостояние(ДанныеКА,Состояния) экспорт
	
	Для каждого х из Состояния Цикл
		
		Если ДанныеКА.Состояния[х] = Неопределено Тогда
			ВызватьИсключение "Неверное конечное состояние '"+х+"' (отсутствует во множестве допустимых состояний)";
		КонецЕсли; 
		
		ДанныеКА.КонечныеСостояния[х] = х;
	КонецЦикла; 
	
	Возврат ЭтотОбъект;
	
КонецФункции // УстановитьКонечноеСостояние()

// Установливает начальное состояние
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <НачальноеСостояние>  - <Произвольный> - начальное состояние
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
Функция УстановитьНачальноеСостояние(ДанныеКА,НачальноеСостояние) экспорт
	Если ДанныеКА.Состояния[НачальноеСостояние] = Неопределено Тогда
		ВызватьИсключение "Неверное начальное состояние '"+НачальноеСостояние+"' (отсутствует во множестве допустимых состояний)";
	КонецЕсли; 
	
	ДанныеКА.НачальноеСостояние = НачальноеСостояние;	
	Возврат ЭтотОбъект;
	
КонецФункции // УстановитьКонечноеСостояние()



// Добавляет переход в таблицу переходов и состояния1 в состояние2 по символу "Символ"
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СостояниеИсточник>  - <Произвольный> - состояние откуда переходим
//  <Символ>  - <Символ> - Символ по которому переходим
//  <СостояниеПриемник>  - <Произвольный> или <Массив> - состояние куда переходим
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ДобавитьПереход(ДанныеКА,СостояниеИсточник,Символ,СостояниеПриемник) экспорт
	
	Если ДанныеКА.ЭтоДКА Тогда
		Возврат ДобавитьПереходДКА(ДанныеКА,СостояниеИсточник,Символ,СостояниеПриемник);
	Иначе
		Возврат ДобавитьПереходНКА(ДанныеКА,СостояниеИсточник,Символ,СостояниеПриемник);
	КонецЕсли; 	
КонецФункции // ДобавитьПереход()



// Добавляет переход в таблицу переходов и состояния1 в состояние2 по символу "Символ"
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СостояниеИсточник>  - <Произвольный> - состояние откуда переходим
//  <Символ>  - <Символ> - Символ по которому переходим
//  <СостояниеПриемник>  - <Произвольный> или <Массив> - состояние куда переходим
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ДобавитьПереходЕ(ДанныеКА,СостояниеИсточник,СостояниеПриемник) экспорт
	Если не ДанныеКА.ЭтоеНКА  Тогда
		ВызватьИсключение "Добавление эпсилон-перехода возможно только для автомата с типом еНКА";
	КонецЕсли; 
	
	ДобавитьПереход(ДанныеКА,СостояниеИсточник,ДанныеКА.Эпсилон,СостояниеПриемник);
	Возврат ЭтотОбъект;
КонецФункции // ДобавитьПереход()

// заменяет все неопределенные переходы, на переход в ошибочное состояние
//
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ДобавитьПереходыВОшибочныеСостояния(ДанныеКА) экспорт
	
	Если не ДанныеКА.ЭтоДКА Тогда
		ВызватьИсключение "Дополнение возможно только для КА с типом ДКА";
	КонецЕсли; 
	
	ДанныеКА.ОшибочноеСостояние = "error"+Формат(ДанныеКА.Состояния.Количество(),"ЧГ=");
	ДанныеКА.Состояния[ДанныеКА.ОшибочноеСостояние] = ДанныеКА.ОшибочноеСостояние;
	ДанныеКА.СоответствиеПереходов[ДанныеКА.ОшибочноеСостояние] = новый Соответствие;
	
	Для каждого х из ДанныеКА.Состояния Цикл
		Для каждого у из ДанныеКА.Алфавит Цикл
			
			Если не ДанныеКА.СоответствиеПереходов[х.Ключ][у.Ключ] = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			ДанныеКА.СоответствиеПереходов[х.Ключ][у.Ключ] = ДанныеКА.ОшибочноеСостояние;
			
		КонецЦикла; 
	КонецЦикла; 
	
	
КонецФункции // ДобавитьПереходыВОшибочныеСостояния()


// Возврвщет истину если текущее состояние входит в множество конечных состояний
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
// Возвращаемое значение:
//   <Булево>   
//
Функция ЭтоКонечноеСостояние(ДанныеКА) экспорт
	
	Если ТипЗнч(ДанныеКА.ТекущееСостояние) = тип("Массив") Тогда
		Результат = Ложь;
		Для каждого х из ДанныеКА.ТекущееСостояние Цикл
			Результат = Результат или ДанныеКА.КонечныеСостояния[х] <> Неопределено;
		КонецЦикла; 
		
		
	Иначе
		Результат = ДанныеКА.КонечныеСостояния[ДанныеКА.ТекущееСостояние] <> Неопределено;	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ЭтоКонечноеСостояние()

// Применяет автомат к переданой строке
//
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СтрокаАнализа>  - <Строка> - строка для анализа
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция Применить(ДанныеКА,СтрокаАнализа) экспорт
	
	Если ДанныеКА.ЭтоДКА Тогда
		Возврат ПрименитьДКА(ДанныеКА,СтрокаАнализа);
	ИначеЕсли ДанныеКА.ЭтоНКА Тогда
		Возврат ПрименитьНКА(ДанныеКА,СтрокаАнализа);
	ИначеЕсли ДанныеКА.ЭтоеНКА Тогда
		Возврат ПрименитьеНКА(ДанныеКА,СтрокаАнализа);
	иначе
		ВызватьИсключение "Неверный тип автомата";
	КонецЕсли; 
КонецФункции


Функция СоединитьПараллельно(а1,а2) Экспорт 

	
	СтруктураАвтомата = ИнициализироватьКА(Определения().еНКА);
	
	/// Собирае алфавит
	Для каждого х из а1.Алфавит Цикл
		Если х.Ключ = а1.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 
	Для каждого х из а2.Алфавит Цикл
		Если х.Ключ = а2.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 

	
	// Собираем состояния
	НачальноеСостояние = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[НачальноеСостояние] = НачальноеСостояние;		
	СтруктураАвтомата.НачальноеСостояние = НачальноеСостояние;
	Преобразование_а1 = новый Соответствие;
	Для каждого х из а1.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а1[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	
	Преобразование_а2 = новый Соответствие;
	Для каждого х из а2.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а2[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	/// Определяем новое конечное сосотяние и копиуем конечные состояния
	КонечноеСостояние = "e"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[КонечноеСостояние] = КонечноеСостояние;		
	СтруктураАвтомата.КонечныеСостояния[КонечноеСостояние] = КонечноеСостояние;	
	
	
	Для каждого х из а1.КонечныеСостояния Цикл
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а1[х.Ключ],КонечноеСостояние);
	КонецЦикла; 
	
	Для каждого х из а2.КонечныеСостояния Цикл
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а2[х.Ключ],КонечноеСостояние);
	КонецЦикла; 
	
	/// Опеределим переходы в начальные сосотяния
	
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,Преобразование_а1[а1.НачальноеСостояние]);
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,Преобразование_а2[а2.НачальноеСостояние]);
	
	
	СтруктураАвтомата.СоответствиеПереходов[КонечноеСостояние] = новый Соответствие;
	
	
	Для каждого строкаПерехода из а1.СоответствиеПереходов Цикл
		откуда = Преобразование_а1[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а1.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а1[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого строкаПерехода из а2.СоответствиеПереходов Цикл
		откуда = Преобразование_а2[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а2.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а2[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	
	Возврат СтруктураАвтомата;
	
КонецФункции

Функция СоединитьПоследовательно(а1,а2) Экспорт 

	
	СтруктураАвтомата = ИнициализироватьКА(Определения().еНКА);
	
	/// Собирае алфавит
	Для каждого х из а1.Алфавит Цикл
		Если х.Ключ = а1.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 
	Для каждого х из а2.Алфавит Цикл
		Если х.Ключ = а2.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 


	
	
	Преобразование_а1 = новый Соответствие;
	Для каждого х из а1.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а1[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	
	Преобразование_а2 = новый Соответствие;
	Для каждого х из а2.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а2[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	
	// Собираем состояния
	НачальноеСостояние = а1.НачальноеСостояние;
	СтруктураАвтомата.НачальноеСостояние = Преобразование_а1[НачальноеСостояние];
	
	
	Для каждого х из а2.КонечныеСостояния Цикл
		СтруктураАвтомата.КонечныеСостояния[Преобразование_а2[х.Ключ]] = Преобразование_а2[х.Ключ];
	КонецЦикла; 
	
	
	/// Связываем конечные состояния а1 с начальным состоянием а2
	Для каждого х из а1.КонечныеСостояния Цикл
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а1[х.Ключ],Преобразование_а2[а2.НачальноеСостояние]);
	КонецЦикла; 
	
	
	
	
	Для каждого строкаПерехода из а1.СоответствиеПереходов Цикл
		откуда = Преобразование_а1[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а1.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а1[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	Для каждого строкаПерехода из а2.СоответствиеПереходов Цикл
		откуда = Преобразование_а2[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а2.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а2[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	
	Возврат СтруктураАвтомата;
	
КонецФункции

Функция Повторения_01(а1) Экспорт 

	
	СтруктураАвтомата = ИнициализироватьКА(Определения().еНКА);
	
	/// Собирае алфавит
	Для каждого х из а1.Алфавит Цикл
		Если х.Ключ = а1.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 
	
	// Собираем состояния
	НачальноеСостояние = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[НачальноеСостояние] = НачальноеСостояние;		
	СтруктураАвтомата.НачальноеСостояние = НачальноеСостояние;
	Преобразование_а1 = новый Соответствие;
	Для каждого х из а1.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а1[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	
	/// Определяем новое конечное сосотяние и копиуем конечные состояния
	КонечноеСостояние = "e"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[КонечноеСостояние] = КонечноеСостояние;		
	СтруктураАвтомата.КонечныеСостояния[КонечноеСостояние] = КонечноеСостояние;	
	
	
	Для каждого х из а1.КонечныеСостояния Цикл
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а1[х.Ключ],КонечноеСостояние);
	КонецЦикла; 
	
	/// Опеределим переходы в начальные сосотяния
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,КонечноеСостояние);
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,Преобразование_а1[а1.НачальноеСостояние]);
	
	
	СтруктураАвтомата.СоответствиеПереходов[КонечноеСостояние] = новый Соответствие;
	
	
	Для каждого строкаПерехода из а1.СоответствиеПереходов Цикл
		откуда = Преобразование_а1[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а1.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а1[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	
	
	Возврат СтруктураАвтомата;
	
КонецФункции


Функция Повторения_0Много(а1) Экспорт 

	
	СтруктураАвтомата = ИнициализироватьКА(Определения().еНКА);
	
	/// Собирае алфавит
	Для каждого х из а1.Алфавит Цикл
		Если х.Ключ = а1.Эпсилон Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураАвтомата.Алфавит[х.Ключ] = х.Ключ;
	КонецЦикла; 
	
	// Собираем состояния
	НачальноеСостояние = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[НачальноеСостояние] = НачальноеСостояние;		
	СтруктураАвтомата.НачальноеСостояние = НачальноеСостояние;
	Преобразование_а1 = новый Соответствие;
	Для каждого х из а1.Состояния Цикл
		Значение = "s"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
		Преобразование_а1[х.Ключ] = Значение;
		СтруктураАвтомата.Состояния[Значение] = Значение;		
	КонецЦикла; 
	
	
	/// Определяем новое конечное сосотяние и копиуем конечные состояния
	КонечноеСостояние = "e"+Формат(СтруктураАвтомата.Состояния.Количество(),"ЧГ=");
	СтруктураАвтомата.Состояния[КонечноеСостояние] = КонечноеСостояние;		
	СтруктураАвтомата.КонечныеСостояния[КонечноеСостояние] = КонечноеСостояние;	
	
	
	Для каждого х из а1.КонечныеСостояния Цикл
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а1[х.Ключ],КонечноеСостояние);
		ДобавитьПереходЕ(СтруктураАвтомата,Преобразование_а1[х.Ключ],НачальноеСостояние);
	КонецЦикла; 
	
	/// Опеределим переходы в начальные сосотяния
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,КонечноеСостояние);
	ДобавитьПереходЕ(СтруктураАвтомата,НачальноеСостояние,Преобразование_а1[а1.НачальноеСостояние]);
	
	
	СтруктураАвтомата.СоответствиеПереходов[КонечноеСостояние] = новый Соответствие;
	
	
	Для каждого строкаПерехода из а1.СоответствиеПереходов Цикл
		откуда = Преобразование_а1[строкаПерехода.Ключ];
		Для каждого символПерехода из строкаПерехода.значение Цикл
			символПереходаЗначение = символПерехода.Ключ;
			Если символПереходаЗначение = а1.Эпсилон Тогда
				ДобавляемыйСимвол = СтруктураАвтомата.Эпсилон;
			иначе
				ДобавляемыйСимвол = символПереходаЗначение;
			КонецЕсли;
			Для каждого у из символПерехода.Значение Цикл
				ДобавитьПереход(СтруктураАвтомата,откуда,ДобавляемыйСимвол,Преобразование_а1[у] );
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	
	
	Возврат СтруктураАвтомата;
	
КонецФункции


Функция Повторения_1Много(а1) Экспорт 
	
	Возврат СоединитьПоследовательно(а1,Повторения_0Много(а1));
	
	
КонецФункции



// Возвращает строку описания в формате graph-wizard
//   <Имя> 		- имя автомата
// Возвращаемое значение:
//   <Строка>   - Определние файла для GW
//
Функция ВернутьПредставление_gv(ДанныеКА,Имя) экспорт
	Если ДанныеКА.ЭтоДКА Тогда
		Возврат ВернутьПредставление_gv_ДКА(ДанныеКА,Имя);
	ИначеЕсли ДанныеКА.ЭтоНКА Тогда
		Возврат ВернутьПредставление_gv_НКА(ДанныеКА,Имя);
	ИначеЕсли ДанныеКА.ЭтоеНКА Тогда
		Возврат ВернутьПредставление_gv_еНКА(ДанныеКА,Имя);
	Иначе
		ВызватьИсключение "Неизвестный тип автомата";
	КонецЕсли; 
КонецФункции


#КонецОбласти 



#Область Приватные_методы
#Область  Применение_автомата

// Применяет детерменированный автомат к переданой строке
//
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СтрокаАнализа>  - <Строка> - строка для анализа
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ПрименитьДКА(ДанныеКА,СтрокаАнализа) 
	
	ТекущееСостояние = ДанныеКА.НачальноеСостояние;
	ДлинаСтроки  = СтрДлина(СтрокаАнализа);
	
	Для ПозицияСтроки = 1 По ДлинаСтроки Цикл
		
		символАнализа = Сред(СтрокаАнализа,ПозицияСтроки,1);
		
		Если ДанныеКА.Алфавит[символАнализа] = Неопределено Тогда
			ВызватьИсключение "Символ '"+символАнализа+"' не найден в алфавите";
		КонецЕсли; 
		
		ТекущаяСтрока = ДанныеКА.СоответствиеПереходов[ТекущееСостояние];
		ТекущееСостояние = ТекущаяСтрока[символАнализа];
	КонецЦикла; 
	
	ДанныеКА.ТекущееСостояние = ТекущееСостояние;
	Возврат ЭтотОбъект;
КонецФункции // Применить()

Функция ПрименитьНКА(ДанныеКА,СтрокаАнализа) 
	ТекущееСостояние = новый Массив;
	Если ТипЗнч(ДанныеКА.НачальноеСостояние) = тип("Массив") Тогда
		Для каждого х из  ДанныеКА.НачальноеСостояние Цикл
			ТекущееСостояние.Добавить(х);
		КонецЦикла; 
	Иначе
		ТекущееСостояние.Добавить(ДанныеКА.НачальноеСостояние);
	КонецЕсли; 
	
	ДлинаСтроки  = СтрДлина(СтрокаАнализа);
	
	Для ПозицияСтроки = 1 По ДлинаСтроки Цикл
		
		символАнализа = Сред(СтрокаАнализа,ПозицияСтроки,1);
		
		Если ДанныеКА.Алфавит[символАнализа] = Неопределено Тогда
			ВызватьИсключение "Символ '"+символАнализа+"' не найден в алфавите";
		КонецЕсли; 
		
		ОпределениеСостояния = новый Массив;
		Для каждого х из ТекущееСостояние Цикл
			ТекущаяСтрока = ДанныеКА.СоответствиеПереходов[х];
			ДоступноеСостояние = ТекущаяСтрока[символАнализа];
			
			Если ДоступноеСостояние = Неопределено Тогда
				Продолжить;;
			КонецЕсли; 
			
			
			Если ТипЗнч(ДоступноеСостояние) = тип("Массив")  Тогда
				Для каждого у из ДоступноеСостояние Цикл
					ОпределениеСостояния.Добавить(у);	
				КонецЦикла; 
			ИначеЕсли не ТипЗнч(ДоступноеСостояние) = тип("Массив")  Тогда 
				ОпределениеСостояния.Добавить(ДоступноеСостояние);
			КонецЕсли; 
		КонецЦикла; 
		
		ТекущееСостояние = ОпределениеСостояния;
	КонецЦикла; 
	
	ДанныеКА.ТекущееСостояние = ТекущееСостояние;
	
	Возврат ЭтотОбъект;
КонецФункции // Применить()

Функция ПрименитьеНКА(ДанныеКА,СтрокаАнализа) 
	
	
	ТекущееСостояние = новый Массив;
	Если ТипЗнч(ДанныеКА.НачальноеСостояние) = тип("Массив") Тогда
		Для каждого х из  ДанныеКА.НачальноеСостояние Цикл
			ТекущееСостояние.Добавить(х);
		КонецЦикла; 
	Иначе
		ТекущееСостояние.Добавить(ДанныеКА.НачальноеСостояние);
	КонецЕсли; 
	
	ДлинаСтроки  = СтрДлина(СтрокаАнализа);
	
	Для ПозицияСтроки = 1 По ДлинаСтроки Цикл
		символАнализа = Сред(СтрокаАнализа,ПозицияСтроки,1);
		Если ДанныеКА.Алфавит[символАнализа] = Неопределено Тогда
			ВызватьИсключение "Символ '"+символАнализа+"' не найден в алфавите";
		КонецЕсли; 
		
		ОпределениеСостояния = новый Массив;
		
		Для каждого х из ТекущееСостояние Цикл
			
			Для каждого у из ОписатьЕЗамыкание(ДанныеКА,х) Цикл
				
				ТекущаяСтрока = ДанныеКА.СоответствиеПереходов[у.ключ];
				Если ТекущаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ДоступноеСостояние = ТекущаяСтрока[символАнализа];
				Если ДоступноеСостояние = Неопределено Тогда
					Продолжить;;
				КонецЕсли; 
				
				
				Если ТипЗнч(ДоступноеСостояние) = тип("Массив")  Тогда
					Для каждого у из ДоступноеСостояние Цикл
						ОпределениеСостояния.Добавить(у);	
					КонецЦикла; 
				ИначеЕсли не ТипЗнч(ДоступноеСостояние) = тип("Массив")  Тогда 
					ОпределениеСостояния.Добавить(ДоступноеСостояние);
				КонецЕсли;				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Для каждого х из ОпределениеСостояния Цикл
			еЗамыкание = ОписатьЕЗамыкание(ДанныеКА,х);
			Для каждого у из еЗамыкание Цикл
				Если не ОпределениеСостояния.Найти(у.ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ОпределениеСостояния.Добавить(у.ключ);
			КонецЦикла; 
		КонецЦикла; 
		
		ТекущееСостояние = ОпределениеСостояния;
	КонецЦикла; 
	
	
	ДанныеКА.ТекущееСостояние = ТекущееСостояние;
	
	Возврат ЭтотОбъект;
	
	
	
	Возврат ЭтотОбъект;
КонецФункции // Применить()

#КонецОбласти 


// Добавляет переход в таблицу переходов и состояния1 в состояние2 по символу "Символ"
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СостояниеИсточник>  - <Произвольный> - состояние откуда переходим
//  <Символ>  - <Символ> - Символ по которому переходим
//  <СостояниеПриемник>  - <Произвольный> или <Массив> - состояние куда переходим
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ДобавитьПереходНКА(ДанныеКА,СостояниеИсточник,Символ,СостояниеПриемник) 
	
	
	Если ДанныеКА.Состояния[СостояниеИсточник] = Неопределено Тогда
		ВызватьИсключение "Неверное состояние источник '"+СостояниеИсточник+"' (отсутствует во множестве допустимых состояний)";
	КонецЕсли; 
	
	
	Если не ТипЗнч(СостояниеПриемник) = Тип("Массив") и  ДанныеКА.Состояния[СостояниеПриемник] = Неопределено Тогда
		ВызватьИсключение "Неверное состояние приемник '"+СостояниеПриемник+"' (отсутствует во множестве допустимых состояний)";
	ИначеЕсли ТипЗнч(СостояниеПриемник) = Тип("Массив") тогда
		Для каждого х из СостояниеПриемник Цикл
			Если ДанныеКА.Состояния[х] = Неопределено Тогда
				ВызватьИсключение "Неверное состояние приемник '"+х+"' (отсутствует во множестве допустимых состояний)";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ДанныеКА.Алфавит[Символ] = Неопределено Тогда
		ВызватьИсключение "Символ '"+Символ+"' не найден в алфавите";
	КонецЕсли; 
	
	Если ДанныеКА.СоответствиеПереходов[СостояниеИсточник] = Неопределено Тогда
		ДанныеКА.СоответствиеПереходов[СостояниеИсточник] = новый Соответствие;
	КонецЕсли; 
	
	ТекущаяСтрока = ДанныеКА.СоответствиеПереходов[СостояниеИсточник];
	
	Если не ТипЗнч(СостояниеПриемник) = Тип("Массив") тогда
		_СостояниеПриемник = новый Массив;
		_СостояниеПриемник.Добавить(СостояниеПриемник);
	иначе
		_СостояниеПриемник = СостояниеПриемник;
	КонецЕсли;
	
	_СуществующиеСостояние = ТекущаяСтрока[Символ];
	Если _СуществующиеСостояние = Неопределено Тогда
		Если ТипЗнч( СостояниеПриемник) = тип("Массив") Тогда
			_СуществующиеСостояние = СостояниеПриемник;
		Иначе
			_СуществующиеСостояние = новый Массив;
			_СуществующиеСостояние.Добавить(СостояниеПриемник);
		КонецЕсли; 
	Иначе
		_СуществующиеСостояние.Добавить(СостояниеПриемник);
	КонецЕсли; 
	
	ТекущаяСтрока[Символ] = _СуществующиеСостояние;
	
	
	Возврат ЭтотОбъект;
КонецФункции // ДобавитьПереход()

// Добавляет переход в таблицу переходов и состояния1 в состояние2 по символу "Символ"
// Параметры
//  <ДанныеКА>  - <Структура> - определение автомата
//  <СостояниеИсточник>  - <Произвольный> - состояние откуда переходим
//  <Символ>  - <Символ> - Символ по которому переходим
//  <СостояниеПриемник>  - <Произвольный> или <Массив> - состояние куда переходим
//
// Возвращаемое значение:
//   <ЭтотОбъект>   - для поддержания доступа через точку
//
Функция ДобавитьПереходДКА(ДанныеКА,СостояниеИсточник,Символ,СостояниеПриемник) 
	
	
	Если ДанныеКА.Состояния[СостояниеИсточник] = Неопределено Тогда
		ВызватьИсключение "Неверное состояние источник '"+СостояниеИсточник+"' (отсутствует во множестве допустимых состояний)";
	КонецЕсли; 
	
	
	Если не ТипЗнч(СостояниеПриемник) = Тип("Массив") и  ДанныеКА.Состояния[СостояниеПриемник] = Неопределено Тогда
		ВызватьИсключение "Неверное состояние приемник '"+СостояниеПриемник+"' (отсутствует во множестве допустимых состояний)";
	КонецЕсли; 
	
	Если ДанныеКА.Алфавит[Символ] = Неопределено Тогда
		ВызватьИсключение "Символ '"+Символ+"' не найден в алфавите";
	КонецЕсли; 
	
	Если ДанныеКА.СоответствиеПереходов[СостояниеИсточник] = Неопределено Тогда
		ДанныеКА.СоответствиеПереходов[СостояниеИсточник] = новый Соответствие;
	КонецЕсли; 
	
	
	
	ТекущаяСтрока = ДанныеКА.СоответствиеПереходов[СостояниеИсточник];
	ТекущаяСтрока[Символ] = СостояниеПриемник;
	
	
	
	Возврат ЭтотОбъект;
КонецФункции // ДобавитьПереход()

Функция ВернутьПредставление_gv_ДКА(ДанныеКА,Имя) 
	
	
	СтрокаВозврата = "digraph %1
	|{
	|%2
	|%3
	|}";
	
	МассивСостояний = новый массив;
	МассивПереходов = новый массив;
	
	представлениеОшибки = "Error";
	Для каждого х из ДанныеКА.Состояния Цикл
		
		ЭтоНачальное = ДанныеКА.НачальноеСостояние = х.Ключ;
		ЭтоКонечное= ДанныеКА.КонечныеСостояния[х.Ключ] <> Неопределено;
		ЭтоОшибка = ДанныеКА.ОшибочноеСостояние = х.Ключ;
		
		Определение = СтрШаблон("%1 [shape = %2  label = ""%3""];" 
		,?(ЭтоОшибка,представлениеОшибки,х.Ключ), ?(ЭтоКонечное,"doublecircle","circle"),?(ЭтоНачальное,"Start",?(ЭтоОшибка,представлениеОшибки,х.Ключ)));
		МассивСостояний.Добавить(Определение);
	КонецЦикла; 
	
	
	Для каждого х из ДанныеКА.СоответствиеПереходов Цикл
		Для каждого у из х.Значение Цикл
			
			ЭтоОшибкаПолучатель = ДанныеКА.ОшибочноеСостояние = у.Значение;
			ЭтоОшибкаИсточник = ДанныеКА.ОшибочноеСостояние = х.Ключ;
			
			Переход = СтрШаблон("%1 -> %2 [ label = ""%3"" ];",
			?(ЭтоОшибкаИсточник,представлениеОшибки,х.Ключ),?(ЭтоОшибкаПолучатель,представлениеОшибки,у.Значение), у.Ключ);
			МассивПереходов.Добавить(Переход);
		КонецЦикла; 
		
	КонецЦикла; 
	
	
	
	Возврат СтрШаблон(СтрокаВозврата, имя,СтрСоединить(МассивСостояний,Символы.ПС),СтрСоединить(МассивПереходов,Символы.ПС));
	
КонецФункции // ВернутьПредставление_gv()



Функция ВернутьПредставление_gv_еНКА(ДанныеКА,Имя) 
	
	
	СтрокаВозврата = "digraph %1
	|{
	|%2
	|%3
	|}";
	
	МассивСостояний = новый массив;
	МассивПереходов = новый массив;
	
	представлениеОшибки = "Error";
	Для каждого х из ДанныеКА.Состояния Цикл
		
		ЭтоНачальное = ДанныеКА.НачальноеСостояние = х.Ключ;
		ЭтоКонечное= ДанныеКА.КонечныеСостояния[х.Ключ] <> Неопределено;
		ЭтоОшибка = ДанныеКА.ОшибочноеСостояние = х.Ключ;
		
		Определение = СтрШаблон("%1 [shape = %2  label = ""%3""];" 
		,?(ЭтоОшибка,представлениеОшибки,х.Ключ), ?(ЭтоКонечное,"doublecircle","circle"),?(ЭтоНачальное,"Start",?(ЭтоОшибка,представлениеОшибки,х.Ключ)));
		МассивСостояний.Добавить(Определение);
	КонецЦикла; 
	
	
	Для каждого х из ДанныеКА.СоответствиеПереходов Цикл
		Для каждого у из х.Значение Цикл
			Для каждого получатель из у.Значение Цикл
				
				Переход = СтрШаблон("%1 -> %2 [ label = ""%3"" ];",
				х.Ключ,получатель, ?(у.Ключ = ДанныеКА.Эпсилон,"ε",у.Ключ) );
				МассивПереходов.Добавить(Переход);
				
				
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого х из ДанныеКА.СоответствиеПереходов Цикл
		Для каждого у из х.Значение Цикл
			
			ЭтоОшибкаПолучатель = ДанныеКА.ОшибочноеСостояние = у.Значение;
			ЭтоОшибкаИсточник = ДанныеКА.ОшибочноеСостояние = х.Ключ;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	
	
	Возврат СтрШаблон(СтрокаВозврата, имя,СтрСоединить(МассивСостояний,Символы.ПС),СтрСоединить(МассивПереходов,Символы.ПС));
	
КонецФункции // ВернутьПредставление_gv()


Функция ВернутьПредставление_gv_НКА(ДанныеКА,Имя) 
	
	
	СтрокаВозврата = "digraph %1
	|{
	|%2
	|%3
	|}";
	
	МассивСостояний = новый массив;
	МассивПереходов = новый массив;
	
	представлениеОшибки = "Error";
	Для каждого х из ДанныеКА.Состояния Цикл
		
		ЭтоНачальное = ДанныеКА.НачальноеСостояние = х.Ключ;
		ЭтоКонечное= ДанныеКА.КонечныеСостояния[х.Ключ] <> Неопределено;
		ЭтоОшибка = ДанныеКА.ОшибочноеСостояние = х.Ключ;
		
		Определение = СтрШаблон("%1 [shape = %2  label = ""%3""];" 
		,?(ЭтоОшибка,представлениеОшибки,х.Ключ), ?(ЭтоКонечное,"doublecircle","circle"),?(ЭтоНачальное,"Start",?(ЭтоОшибка,представлениеОшибки,х.Ключ)));
		МассивСостояний.Добавить(Определение);
	КонецЦикла; 
	
	
	Для каждого х из ДанныеКА.СоответствиеПереходов Цикл
		Для каждого у из х.Значение Цикл
			Для каждого получатель из у.Значение Цикл
				
				Переход = СтрШаблон("%1 -> %2 [ label = ""%3"" ];",
				х.Ключ,получатель, у.Ключ);
				МассивПереходов.Добавить(Переход);
				
				
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого х из ДанныеКА.СоответствиеПереходов Цикл
		Для каждого у из х.Значение Цикл
			
			ЭтоОшибкаПолучатель = ДанныеКА.ОшибочноеСостояние = у.Значение;
			ЭтоОшибкаИсточник = ДанныеКА.ОшибочноеСостояние = х.Ключ;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	
	
	Возврат СтрШаблон(СтрокаВозврата, имя,СтрСоединить(МассивСостояний,Символы.ПС),СтрСоединить(МассивПереходов,Символы.ПС));
	
КонецФункции // ВернутьПредставление_gv()

#Область Работа_с_НКА
Функция ОписатьЕЗамыкание(ДанныеКА,АнализируемоеСостояние)
	
	СоответствиеВозврата = новый Соответствие;
	СоответствиеВозврата[АнализируемоеСостояние] = АнализируемоеСостояние;
	
	Возврат ПолучитьЕПереходыРекурсивно(ДанныеКА,АнализируемоеСостояние,СоответствиеВозврата);
	
КонецФункции // ()

Функция ПолучитьЕПереходыРекурсивно(ДанныеКА,АнализируемоеСостояние,СоответствиеВозврата)
	
	ДоступныеПереходы = ДанныеКА.СоответствиеПереходов[АнализируемоеСостояние];
	Если ДоступныеПереходы = Неопределено Тогда
		Возврат СоответствиеВозврата;
	КонецЕсли; 
	
	ДоступныеПереходы = ДоступныеПереходы[ДанныеКА.Эпсилон];
	Если ДоступныеПереходы = Неопределено Тогда
		Возврат СоответствиеВозврата;
	КонецЕсли; 
	
	Для каждого Состояние из ДоступныеПереходы Цикл
		
		Если не СоответствиеВозврата[Состояние] = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СоответствиеВозврата[Состояние] = Состояние;
		ПолучитьЕПереходыРекурсивно(ДанныеКА,Состояние,СоответствиеВозврата);
	КонецЦикла; 
	
	Возврат СоответствиеВозврата;
	
КонецФункции // ПолучитьЕПереходыРекурсивно()

#КонецОбласти 

#КонецОбласти 